<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/ai_service/src/main/java/com/child1/ai_service/controller/RecommendationController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ai_service/src/main/java/com/child1/ai_service/controller/RecommendationController.java" />
              <option name="originalContent" value="package com.child1.ai_service.controller;&#10;&#10;&#10;import com.child1.ai_service.model.Recommendation;&#10;import com.child1.ai_service.service.Recommendationservice;&#10;import jakarta.validation.Valid;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequiredArgsConstructor&#10;public class RecommendationController {&#10;&#10;    private final Recommendationservice recommendationservice;&#10;&#10;&#10;    @GetMapping&#10;    public ResponseEntity&lt;List&lt;Recommendation&gt;&gt; getRecommendations() {&#10;&#10;        List&lt;Recommendation&gt; recommendations = recommendationservice.getAllRecommendations();&#10;        return ResponseEntity.ok(recommendations);&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Recommendation&gt; getRecommendationById(@PathVariable String id) {&#10;&#10;        Recommendation recommendation = recommendationservice.getActivityRecommendationById(id);&#10;        if (recommendation != null) {&#10;            return ResponseEntity.ok(recommendation);&#10;        } else {&#10;            return ResponseEntity.notFound().build();&#10;&#10;        }&#10;&#10;    }&#10;&#10;    @PostMapping&#10;    public ResponseEntity&lt;Recommendation&gt; createRecommendation(@Valid @RequestBody Recommendation recommendation) {&#10;        Recommendation savedRecommendation = recommendationservice.saveRecommendation(recommendation);&#10;        return ResponseEntity.ok(savedRecommendation);&#10;    }&#10;&#10;    @PutMapping('/{id}')&#10;    public ResponseEntity&lt;Recommendation&gt; updateRecommendation(@PathVariable String id, @Valid @RequestBody Recommendation recommendation) {&#10;&#10;    }&#10;&#10;    @DeleteMapping(&quot;&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteRecommendation(@RequestParam String id) {&#10;        // Assuming there's a method in the service to delete a recommendation by ID&#10;        recommendationservice.deleteRecommendation(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.child1.ai_service.controller;&#10;&#10;&#10;import com.child1.ai_service.model.Recommendation;&#10;import com.child1.ai_service.service.Recommendationservice;&#10;import jakarta.validation.Valid;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequiredArgsConstructor&#10;public class RecommendationController {&#10;&#10;    private final Recommendationservice recommendationservice;&#10;&#10;&#10;    @GetMapping&#10;    public ResponseEntity&lt;List&lt;Recommendation&gt;&gt; getRecommendations() {&#10;&#10;        List&lt;Recommendation&gt; recommendations = recommendationservice.getAllRecommendations();&#10;        return ResponseEntity.ok(recommendations);&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Recommendation&gt; getRecommendationById(@PathVariable String id) {&#10;&#10;        Recommendation recommendation = recommendationservice.getActivityRecommendationById(id);&#10;        if (recommendation != null) {&#10;            return ResponseEntity.ok(recommendation);&#10;        } else {&#10;            return ResponseEntity.notFound().build();&#10;&#10;        }&#10;&#10;    }&#10;&#10;    @PostMapping&#10;    public ResponseEntity&lt;Recommendation&gt; createRecommendation(@Valid @RequestBody Recommendation recommendation) {&#10;        Recommendation savedRecommendation = recommendationservice.saveRecommendation(recommendation);&#10;        return ResponseEntity.ok(savedRecommendation);&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Recommendation&gt; updateRecommendation(@PathVariable String id, @Valid @RequestBody Recommendation recommendation) {&#10;        // Ensure the path id matches the body id (if present)&#10;        if (recommendation.getId() != null &amp;&amp; !id.equals(recommendation.getId())) {&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;        recommendation.setId(id); // Ensure the id is set from the path&#10;        try {&#10;            Recommendation updated = recommendationservice.saveRecommendation(recommendation);&#10;            return ResponseEntity.ok(updated);&#10;        } catch (IllegalArgumentException e) {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;    }&#10;&#10;    @DeleteMapping(&quot;&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteRecommendation(@RequestParam String id) {&#10;        // Assuming there's a method in the service to delete a recommendation by ID&#10;        recommendationservice.deleteRecommendation(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ai_service/src/main/java/com/child1/ai_service/model/Recommendation.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ai_service/src/main/java/com/child1/ai_service/model/Recommendation.java" />
              <option name="originalContent" value="package com.child1.ai_service.model;&#10;&#10;&#10;import lombok.Data;&#10;import org.springframework.data.annotation.CreatedDate;&#10;import org.springframework.data.mongodb.core.mapping.Document;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;&#10;&#10;@Document(collection = &quot;recommendations&quot;)&#10;@Data&#10;public class Recommendation {&#10;&#10;&#10;    private String id;&#10;    private String activityId;&#10;    private String userId;&#10;    private String activityType;&#10;    private String recommendationText;&#10;    private List&lt;String&gt; improvements;&#10;    private List&lt;String&gt; suggestions;&#10;    private List&lt;String&gt; safety;&#10;&#10;    @CreatedDate&#10;    private LocalDateTime createdAt;&#10;&#10;    private LocalDateTime updatedAt;&#10;}&#10;" />
              <option name="updatedContent" value="package com.child1.ai_service.model;&#10;&#10;&#10;import lombok.Data;&#10;import org.springframework.data.annotation.CreatedDate;&#10;import org.springframework.data.mongodb.core.mapping.Document;&#10;&#10;import javax.validation.constraints.NotBlank;&#10;import javax.validation.constraints.NotNull;&#10;import javax.validation.constraints.Size;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;&#10;&#10;@Document(collection = &quot;recommendations&quot;)&#10;@Data&#10;public class Recommendation {&#10;&#10;    @NotBlank&#10;    private String id;&#10;&#10;    @NotBlank&#10;    private String activityId;&#10;&#10;    @NotBlank&#10;    private String userId;&#10;&#10;    @NotBlank&#10;    private String activityType;&#10;&#10;    @NotBlank&#10;    @Size(max = 1000)&#10;    private String recommendationText;&#10;&#10;    @NotNull&#10;    @Size(max = 10)&#10;    private List&lt;@NotBlank String&gt; improvements;&#10;&#10;    @NotNull&#10;    @Size(max = 10)&#10;    private List&lt;@NotBlank String&gt; suggestions;&#10;&#10;    @NotNull&#10;    @Size(max = 10)&#10;    private List&lt;@NotBlank String&gt; safety;&#10;&#10;    @CreatedDate&#10;    private LocalDateTime createdAt;&#10;&#10;    private LocalDateTime updatedAt;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ai_service/src/main/java/com/child1/ai_service/service/Recommendationservice.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ai_service/src/main/java/com/child1/ai_service/service/Recommendationservice.java" />
              <option name="originalContent" value="package com.child1.ai_service.service;&#10;&#10;&#10;import com.child1.ai_service.model.Recommendation;&#10;import com.child1.ai_service.repo.RecommendationRepo;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;public class Recommendationservice {&#10;    private final RecommendationRepo recommendationRepo;&#10;&#10;    public List&lt;Recommendation&gt; getAllRecommendations() {&#10;        return recommendationRepo.findAll();&#10;    }&#10;&#10;    public Recommendation saveRecommendation(Recommendation recommendation) {&#10;&#10;        return recommendationRepo.save(recommendation);&#10;    }&#10;&#10;    public void deleteRecommendation(String id) {&#10;        if (recommendationRepo.existsById(id)) {&#10;            recommendationRepo.deleteById(id);&#10;        } else {&#10;            throw new IllegalArgumentException(&quot;Recommendation with id &quot; + id + &quot; does not exist.&quot;);&#10;        }&#10;    }&#10;&#10;    public Recommendation getActivityRecommendationById(String id) {&#10;        return recommendationRepo.findById(id)&#10;                .orElseThrow(() -&gt; new IllegalArgumentException(&quot;Recommendation with id &quot; + id + &quot; does not exist.&quot;));&#10;        &#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.child1.ai_service.service;&#10;&#10;&#10;import com.child1.ai_service.model.Recommendation;&#10;import com.child1.ai_service.repo.RecommendationRepo;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.validation.annotation.Validated;&#10;&#10;import javax.validation.Valid;&#10;import java.util.List;&#10;&#10;@Service&#10;@Validated&#10;@RequiredArgsConstructor&#10;public class Recommendationservice {&#10;    private final RecommendationRepo recommendationRepo;&#10;&#10;    public List&lt;Recommendation&gt; getAllRecommendations() {&#10;        return recommendationRepo.findAll();&#10;    }&#10;&#10;    public Recommendation saveRecommendation(@Valid Recommendation recommendation) {&#10;        // Additional null check (optional, as @Valid should handle most cases)&#10;        if (recommendation == null) {&#10;            throw new IllegalArgumentException(&quot;Recommendation cannot be null&quot;);&#10;        }&#10;        return recommendationRepo.save(recommendation);&#10;    }&#10;&#10;    public void deleteRecommendation(String id) {&#10;        if (recommendationRepo.existsById(id)) {&#10;            recommendationRepo.deleteById(id);&#10;        } else {&#10;            throw new IllegalArgumentException(&quot;Recommendation with id &quot; + id + &quot; does not exist.&quot;);&#10;        }&#10;    }&#10;&#10;    public Recommendation getActivityRecommendationById(String id) {&#10;        return recommendationRepo.findById(id)&#10;                .orElseThrow(() -&gt; new IllegalArgumentException(&quot;Recommendation with id &quot; + id + &quot; does not exist.&quot;));&#10;        &#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>