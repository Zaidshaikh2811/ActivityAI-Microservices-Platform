<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/user_service/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user_service/pom.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;&#9;xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;&#9;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#9;&lt;parent&gt;&#10;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&#10;&#9;&#9;&lt;version&gt;3.5.4&lt;/version&gt;&#10;&#9;&#9;&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&#10;&#9;&lt;/parent&gt;&#10;&#9;&lt;groupId&gt;com.child1&lt;/groupId&gt;&#10;&#9;&lt;artifactId&gt;user_service&lt;/artifactId&gt;&#10;&#9;&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;&#9;&lt;name&gt;user_service&lt;/name&gt;&#10;&#9;&lt;description&gt;user_service&lt;/description&gt;&#10;&#9;&lt;url/&gt;&#10;&#9;&lt;licenses&gt;&#10;&#9;&#9;&lt;license/&gt;&#10;&#9;&lt;/licenses&gt;&#10;&#9;&lt;developers&gt;&#10;&#9;&#9;&lt;developer/&gt;&#10;&#9;&lt;/developers&gt;&#10;&#9;&lt;scm&gt;&#10;&#9;&#9;&lt;connection/&gt;&#10;&#9;&#9;&lt;developerConnection/&gt;&#10;&#9;&#9;&lt;tag/&gt;&#10;&#9;&#9;&lt;url/&gt;&#10;&#9;&lt;/scm&gt;&#10;&#9;&lt;properties&gt;&#10;&#9;&#9;&lt;java.version&gt;17&lt;/java.version&gt;&#10;&#9;&lt;/properties&gt;&#10;&#9;&lt;dependencies&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;runtime&lt;/scope&gt;&#10;&#9;&#9;&#9;&lt;optional&gt;true&lt;/optional&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;runtime&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;optional&gt;true&lt;/optional&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&lt;/dependencies&gt;&#10;&#10;&#9;&lt;build&gt;&#10;&#9;&#9;&lt;plugins&gt;&#10;&#9;&#9;&#9;&lt;plugin&gt;&#10;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&lt;configuration&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;annotationProcessorPaths&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;path&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/path&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/annotationProcessorPaths&gt;&#10;&#9;&#9;&#9;&#9;&lt;/configuration&gt;&#10;&#9;&#9;&#9;&lt;/plugin&gt;&#10;&#9;&#9;&#9;&lt;plugin&gt;&#10;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&lt;configuration&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;excludes&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;exclude&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/exclude&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/excludes&gt;&#10;&#9;&#9;&#9;&#9;&lt;/configuration&gt;&#10;&#9;&#9;&#9;&lt;/plugin&gt;&#10;&#9;&#9;&lt;/plugins&gt;&#10;&#9;&lt;/build&gt;&#10;&#10;&lt;/project&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;&#9;xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;&#9;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#9;&lt;parent&gt;&#10;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&#10;&#9;&#9;&lt;version&gt;3.5.4&lt;/version&gt;&#10;&#9;&#9;&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&#10;&#9;&lt;/parent&gt;&#10;&#9;&lt;groupId&gt;com.child1&lt;/groupId&gt;&#10;&#9;&lt;artifactId&gt;user_service&lt;/artifactId&gt;&#10;&#9;&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;&#9;&lt;name&gt;user_service&lt;/name&gt;&#10;&#9;&lt;description&gt;user_service&lt;/description&gt;&#10;&#9;&lt;url/&gt;&#10;&#9;&lt;licenses&gt;&#10;&#9;&#9;&lt;license/&gt;&#10;&#9;&lt;/licenses&gt;&#10;&#9;&lt;developers&gt;&#10;&#9;&#9;&lt;developer/&gt;&#10;&#9;&lt;/developers&gt;&#10;&#9;&lt;scm&gt;&#10;&#9;&#9;&lt;connection/&gt;&#10;&#9;&#9;&lt;developerConnection/&gt;&#10;&#9;&#9;&lt;tag/&gt;&#10;&#9;&#9;&lt;url/&gt;&#10;&#9;&lt;/scm&gt;&#10;&#9;&lt;properties&gt;&#10;&#9;&#9;&lt;java.version&gt;17&lt;/java.version&gt;&#10;&#9;&lt;/properties&gt;&#10;&#9;&lt;dependencies&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;runtime&lt;/scope&gt;&#10;&#9;&#9;&#9;&lt;optional&gt;true&lt;/optional&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;runtime&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;optional&gt;true&lt;/optional&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&lt;/dependencies&gt;&#10;&#10;&#9;&lt;build&gt;&#10;&#9;&#9;&lt;plugins&gt;&#10;&#9;&#9;&#9;&lt;plugin&gt;&#10;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&lt;configuration&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;annotationProcessorPaths&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;path&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/path&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/annotationProcessorPaths&gt;&#10;&#9;&#9;&#9;&#9;&lt;/configuration&gt;&#10;&#9;&#9;&#9;&lt;/plugin&gt;&#10;&#9;&#9;&#9;&lt;plugin&gt;&#10;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&lt;configuration&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;excludes&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;exclude&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/exclude&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/excludes&gt;&#10;&#9;&#9;&#9;&#9;&lt;/configuration&gt;&#10;&#9;&#9;&#9;&lt;/plugin&gt;&#10;&#9;&#9;&lt;/plugins&gt;&#10;&#9;&lt;/build&gt;&#10;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user_service/src/main/java/com/child1/user_service/Dto/RegisterRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user_service/src/main/java/com/child1/user_service/Dto/RegisterRequest.java" />
              <option name="originalContent" value="package com.child1.user_service.Dto;&#10;&#10;&#10;import lombok.Data;&#10;&#10;@Data&#10;public class RegisterRequest {&#10;&#10;    &#10;    private String name;&#10;    private String email;&#10;    private String password;&#10;    private String firstName;&#10;    private String lastName;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.child1.user_service.Dto;&#10;&#10;&#10;import lombok.Data;&#10;&#10;@Data&#10;public class RegisterRequest {&#10;&#10;    @jakarta.validation.constraints.NotBlank(message = &quot;Name is required&quot;)&#10;    private String name;&#10;&#10;    @jakarta.validation.constraints.Email(message = &quot;Invalid email format&quot;)&#10;    @jakarta.validation.constraints.NotBlank(message = &quot;Email is required&quot;)&#10;    private String email;&#10;&#10;    @jakarta.validation.constraints.NotBlank(message = &quot;Password is required&quot;)&#10;    @jakarta.validation.constraints.Size(min = 6, message = &quot;Password must be at least 6 characters&quot;)&#10;    private String password;&#10;&#10;    @jakarta.validation.constraints.NotBlank(message = &quot;First name is required&quot;)&#10;    private String firstName;&#10;&#10;    @jakarta.validation.constraints.NotBlank(message = &quot;Last name is required&quot;)&#10;    private String lastName;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user_service/src/main/java/com/child1/user_service/Service/UserService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user_service/src/main/java/com/child1/user_service/Service/UserService.java" />
              <option name="originalContent" value="package com.child1.user_service.Service;&#10;&#10;&#10;import com.child1.user_service.Dto.RegisterRequest;&#10;import com.child1.user_service.Dto.UserResponseDto;&#10;import com.child1.user_service.Repo.UserRepository;&#10;import com.child1.user_service.model.User;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;&#10;@Service&#10;public class UserService {&#10;&#10;&#10;    private UserRepository userRepository;&#10;&#10;&#10;    // Example method to create a user&#10;    public UserResponseDto createUser(RegisterRequest userResponseDto) {&#10;        User user = new User();&#10;        user.setName(userResponseDto.getName());&#10;        user.setEmail(userResponseDto.getEmail());&#10;        user.setPassword(userResponseDto.getPassword());&#10;        user.setFirstName(userResponseDto.getFirstName());&#10;        user.setLastName(userResponseDto.getLastName());&#10;&#10;         User savedUser=userRepository.save(user);&#10;&#10;        UserResponseDto responseDto = new UserResponseDto();&#10;        responseDto.setId(savedUser.getId());&#10;        responseDto.setName(savedUser.getName());&#10;        responseDto.setEmail(savedUser.getEmail());&#10;        responseDto.setFirstName(savedUser.getFirstName());&#10;        responseDto.setLastName(savedUser.getLastName());&#10;        responseDto.setRole(savedUser.getRole());&#10;&#10;        return responseDto;&#10;&#10;    }&#10;&#10;     // Example method to update a user&#10;    public UserResponseDto updateUser(Long id) {&#10;&#10;        // Logic to update a user by id&#10;        User user = userRepository.findById(id).orElseThrow(() -&gt; new RuntimeException(&quot;User not found&quot;));&#10;        // Update user fields as needed&#10;        User updatedUser = userRepository.save(user);&#10;&#10;        UserResponseDto responseDto = new UserResponseDto();&#10;        responseDto.setId(updatedUser.getId());&#10;        responseDto.setName(updatedUser.getName());&#10;        responseDto.setEmail(updatedUser.getEmail());&#10;        responseDto.setFirstName(updatedUser.getFirstName());&#10;        responseDto.setLastName(updatedUser.getLastName());&#10;        responseDto.setRole(updatedUser.getRole());&#10;&#10;        return responseDto;&#10;&#10;    }&#10;&#10;    // Example method to delete a user&#10;    public UserResponseDto deleteUser(Long id) {&#10;        User user = userRepository.findById(id).orElseThrow(() -&gt; new RuntimeException(&quot;User not found&quot;));&#10;        userRepository.delete(user);&#10;        UserResponseDto responseDto = new UserResponseDto();&#10;        responseDto.setId(user.getId());&#10;        responseDto.setName(user.getName());&#10;        responseDto.setEmail(user.getEmail());&#10;        responseDto.setFirstName(user.getFirstName());&#10;        responseDto.setLastName(user.getLastName());&#10;        responseDto.setRole(user.getRole());&#10;        return responseDto;&#10;    }&#10;&#10;    // Example method to get all users&#10;    public List&lt;UserResponseDto&gt; getUsers() {&#10;&#10;        List&lt;User&gt; users = userRepository.findAll();&#10;        return users.stream().map(user -&gt; {&#10;            UserResponseDto responseDto = new UserResponseDto();&#10;            responseDto.setId(user.getId());&#10;            responseDto.setName(user.getName());&#10;            responseDto.setEmail(user.getEmail());&#10;            responseDto.setFirstName(user.getFirstName());&#10;            responseDto.setLastName(user.getLastName());&#10;            responseDto.setRole(user.getRole());&#10;            return responseDto;&#10;        }).toList();&#10;    }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.child1.user_service.Service;&#10;&#10;&#10;import com.child1.user_service.Dto.RegisterRequest;&#10;import com.child1.user_service.Dto.UserResponseDto;&#10;import com.child1.user_service.Repo.UserRepository;&#10;import com.child1.user_service.model.User;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;&#10;@Service&#10;public class UserService {&#10;&#10;&#10;    private UserRepository userRepository;&#10;&#10;&#10;    // Example method to create a user&#10;    public UserResponseDto createUser(RegisterRequest userResponseDto) {&#10;        // Check if user with email already exists&#10;        if (userRepository.existsByEmail(userResponseDto.getEmail())) {&#10;            throw new IllegalArgumentException(&quot;Email already in use&quot;);&#10;        }&#10;        // Additional checks can be added here (e.g., password strength, name format, etc.)&#10;&#10;        User user = new User();&#10;        user.setName(userResponseDto.getName());&#10;        user.setEmail(userResponseDto.getEmail());&#10;        user.setPassword(userResponseDto.getPassword());&#10;        user.setFirstName(userResponseDto.getFirstName());&#10;        user.setLastName(userResponseDto.getLastName());&#10;&#10;         User savedUser=userRepository.save(user);&#10;&#10;        UserResponseDto responseDto = new UserResponseDto();&#10;        responseDto.setId(savedUser.getId());&#10;        responseDto.setName(savedUser.getName());&#10;        responseDto.setEmail(savedUser.getEmail());&#10;        responseDto.setFirstName(savedUser.getFirstName());&#10;        responseDto.setLastName(savedUser.getLastName());&#10;        responseDto.setRole(savedUser.getRole());&#10;&#10;        return responseDto;&#10;&#10;    }&#10;&#10;     // Example method to update a user&#10;    public UserResponseDto updateUser(Long id) {&#10;&#10;        // Logic to update a user by id&#10;        User user = userRepository.findById(id).orElseThrow(() -&gt; new RuntimeException(&quot;User not found&quot;));&#10;        // Update user fields as needed&#10;        User updatedUser = userRepository.save(user);&#10;&#10;        UserResponseDto responseDto = new UserResponseDto();&#10;        responseDto.setId(updatedUser.getId());&#10;        responseDto.setName(updatedUser.getName());&#10;        responseDto.setEmail(updatedUser.getEmail());&#10;        responseDto.setFirstName(updatedUser.getFirstName());&#10;        responseDto.setLastName(updatedUser.getLastName());&#10;        responseDto.setRole(updatedUser.getRole());&#10;&#10;        return responseDto;&#10;&#10;    }&#10;&#10;    // Example method to delete a user&#10;    public UserResponseDto deleteUser(Long id) {&#10;        User user = userRepository.findById(id).orElseThrow(() -&gt; new RuntimeException(&quot;User not found&quot;));&#10;        userRepository.delete(user);&#10;        UserResponseDto responseDto = new UserResponseDto();&#10;        responseDto.setId(user.getId());&#10;        responseDto.setName(user.getName());&#10;        responseDto.setEmail(user.getEmail());&#10;        responseDto.setFirstName(user.getFirstName());&#10;        responseDto.setLastName(user.getLastName());&#10;        responseDto.setRole(user.getRole());&#10;        return responseDto;&#10;    }&#10;&#10;    // Example method to get all users&#10;    public List&lt;UserResponseDto&gt; getUsers() {&#10;&#10;        List&lt;User&gt; users = userRepository.findAll();&#10;        return users.stream().map(user -&gt; {&#10;            UserResponseDto responseDto = new UserResponseDto();&#10;            responseDto.setId(user.getId());&#10;            responseDto.setName(user.getName());&#10;            responseDto.setEmail(user.getEmail());&#10;            responseDto.setFirstName(user.getFirstName());&#10;            responseDto.setLastName(user.getLastName());&#10;            responseDto.setRole(user.getRole());&#10;            return responseDto;&#10;        }).toList();&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user_service/src/main/java/com/child1/user_service/model/User.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user_service/src/main/java/com/child1/user_service/model/User.java" />
              <option name="originalContent" value="package com.child1.user_service.model;&#10;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.Data;&#10;import org.hibernate.annotations.CreationTimestamp;&#10;import org.hibernate.annotations.UpdateTimestamp;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;@Entity&#10;@Data&#10;@Table(name = &quot;users&quot;)&#10;public class User {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private String id;&#10;&#10;    @Column(nullable = false)&#10;    @jakarta.validation.constraints.NotBlank(message = &quot;Name is required&quot;)&#10;    private String name;&#10;&#10;    @Column(nullable = false, unique = true)&#10;    @jakarta.validation.constraints.Email(message = &quot;Invalid email format&quot;)&#10;    @jakarta.validation.constraints.NotBlank(message = &quot;Email is required&quot;)&#10;    private String email;&#10;&#10;    @Column(nullable = false)&#10;    @jakarta.validation.constraints.NotBlank(message = &quot;Password is required&quot;)&#10;    @jakarta.validation.constraints.Size(min = 6, message = &quot;Password must be at least 6 characters&quot;)&#10;    private String password;&#10;&#10;    @jakarta.validation.constraints.NotBlank(message = &quot;First name is required&quot;)&#10;    private String firstName;&#10;&#10;    @jakarta.validation.constraints.NotBlank(message = &quot;Last name is required&quot;)&#10;    private String lastName;&#10;&#10;    private UserRole role = UserRole.USER;&#10;    @CreationTimestamp&#10;&#10;    private LocalDateTime createdAt;&#10;&#10;    @UpdateTimestamp&#10;    private LocalDateTime updatedAt;&#10;&#10;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.child1.user_service.model;&#13;&#10;&#13;&#10;&#13;&#10;import jakarta.persistence.*;&#13;&#10;import lombok.Data;&#13;&#10;import org.hibernate.annotations.CreationTimestamp;&#13;&#10;import org.hibernate.annotations.UpdateTimestamp;&#13;&#10;&#13;&#10;import java.time.LocalDateTime;&#13;&#10;&#13;&#10;@Entity&#13;&#10;@Data&#13;&#10;@Table(name = &quot;users&quot;)&#13;&#10;public class User {&#13;&#10;&#13;&#10;    @Id&#13;&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#13;&#10;    private Long id;&#13;&#10;&#13;&#10;    @Column(nullable = false)&#13;&#10;    @jakarta.validation.constraints.NotBlank(message = &quot;Name is required&quot;)&#13;&#10;    private String name;&#13;&#10;&#13;&#10;    @Column(nullable = false, unique = true)&#13;&#10;    @jakarta.validation.constraints.Email(message = &quot;Invalid email format&quot;)&#13;&#10;    @jakarta.validation.constraints.NotBlank(message = &quot;Email is required&quot;)&#13;&#10;    private String email;&#13;&#10;&#13;&#10;    @Column(nullable = false)&#13;&#10;    @jakarta.validation.constraints.NotBlank(message = &quot;Password is required&quot;)&#13;&#10;    @jakarta.validation.constraints.Size(min = 6, message = &quot;Password must be at least 6 characters&quot;)&#13;&#10;    private String password;&#13;&#10;&#13;&#10;    @jakarta.validation.constraints.NotBlank(message = &quot;First name is required&quot;)&#13;&#10;    private String firstName;&#13;&#10;&#13;&#10;    @jakarta.validation.constraints.NotBlank(message = &quot;Last name is required&quot;)&#13;&#10;    private String lastName;&#13;&#10;&#13;&#10;    private UserRole role = UserRole.USER;&#13;&#10;    @CreationTimestamp&#13;&#10;&#13;&#10;    private LocalDateTime createdAt;&#13;&#10;&#13;&#10;    @UpdateTimestamp&#13;&#10;    private LocalDateTime updatedAt;&#13;&#10;&#13;&#10;&#13;&#10;&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user_service/src/main/resources/application.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user_service/src/main/resources/application.yml" />
              <option name="originalContent" value="spring:&#10;  application:&#10;    name: user-service&#10;&#10;  datasource:&#10;    url: jdbc:postgresql://localhost:5432/my-postgres-container&#10;    username: admin&#10;    password: admin@123&#10;&#10;  jpa:&#10;    hibernate:&#10;      ddl-auto: update&#10;    database-platform: org.hibernate.dialect.PostgreSQLDialect&#10;" />
              <option name="updatedContent" value="spring:&#10;  application:&#10;    name: user-service&#10;&#10;  datasource:&#10;    url: jdbc:postgresql://localhost:5432/mydatabase&#10;    username: admin&#10;    password: admin@123&#10;&#10;  jpa:&#10;    hibernate:&#10;      ddl-auto: update&#10;    database-platform: org.hibernate.dialect.PostgreSQLDialect" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>