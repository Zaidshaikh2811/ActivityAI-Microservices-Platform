<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/activity_service/src/main/java/com/child1/activity_service/config/rabitMqConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/activity_service/src/main/java/com/child1/activity_service/config/rabitMqConfig.java" />
              <option name="originalContent" value="package com.child1.activity_service.config;&#10;&#10;&#10;import org.springframework.amqp.core.Queue;&#10;import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;&#10;import org.springframework.amqp.support.converter.MessageConverter;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;&#10;@Configuration&#10;public class rabitMqConfig {&#10;&#10;&#10;    @Bean&#10;    public Queue activityQueue() {&#10;        return new Queue(&quot;activity-queue&quot;, true);&#10;    }&#10;&#10;    @Bean&#10;    public MessageConverter messageConverter() {&#10;        return new Jackson2JsonMessageConverter();&#10;    }&#10;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.child1.activity_service.config;&#10;&#10;&#10;import org.springframework.amqp.core.Binding;&#10;import org.springframework.amqp.core.BindingBuilder;&#10;import org.springframework.amqp.core.DirectExchange;&#10;import org.springframework.amqp.core.Queue;&#10;import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;&#10;import org.springframework.amqp.support.converter.MessageConverter;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;&#10;@Configuration&#10;public class rabitMqConfig {&#10;&#10;    @Bean&#10;    public Queue activityQueue() {&#10;        return new Queue(&quot;activity-queue&quot;, true);&#10;    }&#10;&#10;    @Bean&#10;    public DirectExchange activityExchange() {&#10;        return new DirectExchange(&quot;activity-exchange&quot;);&#10;    }&#10;&#10;    @Bean&#10;    public Binding activityBinding(Queue activityQueue, DirectExchange activityExchange) {&#10;        return BindingBuilder.bind(activityQueue).to(activityExchange).with(&quot;activity.tracking&quot;);&#10;    }&#10;&#10;    @Bean&#10;    public MessageConverter messageConverter() {&#10;        return new Jackson2JsonMessageConverter();&#10;    }&#10;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/activity_service/src/main/java/com/child1/activity_service/service/ActivityService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/activity_service/src/main/java/com/child1/activity_service/service/ActivityService.java" />
              <option name="originalContent" value="package com.child1.activity_service.service;&#10;&#10;&#10;import com.child1.activity_service.Dto.ActivityRequestDto;&#10;import com.child1.activity_service.Dto.ActivityResponseDto;&#10;import com.child1.activity_service.Model.Activity;&#10;import com.child1.activity_service.repo.ActivityRepo;&#10;import lombok.AllArgsConstructor;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;&#10;@Service&#10;@AllArgsConstructor&#10;public class ActivityService {&#10;&#10;    private ActivityRepo activityRepo;&#10;    private final GetUser getUser;&#10;&#10;&#10;    @Value(&quot;${rabbitmq.exchange.name}&quot;)&#10;    private String exchange;&#10;    @Value(&quot;${rabbitmq.routing.key}&quot;)&#10;    private String routingKey;&#10;    @Value(&quot;${rabbitmq.queue.name}&quot;)&#10;    private String queueName;&#10;&#10;&#10;    public List&lt;ActivityResponseDto&gt; getAllActivities() {&#10;        List&lt;Activity&gt; activityList = activityRepo.findAll();&#10;        if (activityList.isEmpty()) {&#10;            throw new IllegalStateException(&quot;No activities found&quot;);&#10;        }&#10;        return activityList.stream()&#10;                .map(activity -&gt; {&#10;                    ActivityResponseDto response = new ActivityResponseDto();&#10;                    response.setActivityType(activity.getActivityType());&#10;                    response.setDuration(activity.getDuration());&#10;                    response.setCaloriesBurned(activity.getCaloriesBurned());&#10;                    response.setStartTime(activity.getStartTime());&#10;                    response.setAdditionalMetrics(activity.getAdditionalMetrics());&#10;                    return response;&#10;                }).toList();&#10;&#10;&#10;&#10;    }&#10;&#10;    public ActivityResponseDto createActivity(ActivityRequestDto activity) {&#10;        ActivityResponseDto response = new ActivityResponseDto();&#10;&#10;        response.setActivityType(activity.getActivityType());&#10;        response.setDuration(activity.getDuration());&#10;        response.setCaloriesBurned(activity.getCaloriesBurned());&#10;        response.setStartTime(activity.getStartTime());&#10;        response.setAdditionalMetrics(activity.getAdditionalMetrics());&#10;&#10;        activityRepo.save(response.toEntity());&#10;&#10;&#10;&#10;&#10;        return response;&#10;&#10;    }&#10;&#10;    public ActivityResponseDto updateActivity(Long id, ActivityRequestDto activity) {&#10;&#10;&#10;&#10;        ActivityResponseDto response = new ActivityResponseDto();&#10;        response.setActivityType(activity.getActivityType());&#10;        response.setDuration(activity.getDuration());&#10;        response.setCaloriesBurned(activity.getCaloriesBurned());&#10;        response.setStartTime(activity.getStartTime());&#10;        response.setAdditionalMetrics(activity.getAdditionalMetrics());&#10;&#10;        Activity existingActivity = activityRepo.findById(id).orElseThrow(() -&gt; new RuntimeException(&quot;Activity not found&quot;));&#10;        existingActivity.updateFromDto(response);&#10;        activityRepo.save(existingActivity);&#10;&#10;        return response;&#10;    }&#10;&#10;    public void deleteActivity(Long id) {&#10;        if (!activityRepo.existsById(id)) {&#10;            throw new RuntimeException(&quot;Activity not found&quot;);&#10;        }&#10;        activityRepo.deleteById(id);&#10;    }&#10;&#10;&#10;    public boolean validateUserEmail(String email) {&#10;        try {&#10;            getUser.getUserByEmail(email);&#10;            return true;&#10;        } catch (Exception e) {&#10;            return false;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.child1.activity_service.service;&#10;&#10;&#10;import com.child1.activity_service.Dto.ActivityRequestDto;&#10;import com.child1.activity_service.Dto.ActivityResponseDto;&#10;import com.child1.activity_service.Model.Activity;&#10;import com.child1.activity_service.repo.ActivityRepo;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;&#10;@Service&#10;public class ActivityService {&#10;&#10;    private ActivityRepo activityRepo;&#10;    private final GetUser getUser;&#10;&#10;&#10;    @Value(&quot;${rabbitmq.exchange.name}&quot;)&#10;    private String exchange;&#10;    @Value(&quot;${rabbitmq.routing.key}&quot;)&#10;    private String routingKey;&#10;    @Value(&quot;${rabbitmq.queue.name}&quot;)&#10;    private String queueName;&#10;&#10;&#10;    public List&lt;ActivityResponseDto&gt; getAllActivities() {&#10;        List&lt;Activity&gt; activityList = activityRepo.findAll();&#10;        if (activityList.isEmpty()) {&#10;            throw new IllegalStateException(&quot;No activities found&quot;);&#10;        }&#10;        return activityList.stream()&#10;                .map(activity -&gt; {&#10;                    ActivityResponseDto response = new ActivityResponseDto();&#10;                    response.setActivityType(activity.getActivityType());&#10;                    response.setDuration(activity.getDuration());&#10;                    response.setCaloriesBurned(activity.getCaloriesBurned());&#10;                    response.setStartTime(activity.getStartTime());&#10;                    response.setAdditionalMetrics(activity.getAdditionalMetrics());&#10;                    return response;&#10;                }).toList();&#10;&#10;&#10;&#10;    }&#10;&#10;    public ActivityResponseDto createActivity(ActivityRequestDto activity) {&#10;        ActivityResponseDto response = new ActivityResponseDto();&#10;&#10;        response.setActivityType(activity.getActivityType());&#10;        response.setDuration(activity.getDuration());&#10;        response.setCaloriesBurned(activity.getCaloriesBurned());&#10;        response.setStartTime(activity.getStartTime());&#10;        response.setAdditionalMetrics(activity.getAdditionalMetrics());&#10;&#10;        activityRepo.save(response.toEntity());&#10;&#10;&#10;&#10;&#10;        return response;&#10;&#10;    }&#10;&#10;    public ActivityResponseDto updateActivity(Long id, ActivityRequestDto activity) {&#10;&#10;&#10;&#10;        ActivityResponseDto response = new ActivityResponseDto();&#10;        response.setActivityType(activity.getActivityType());&#10;        response.setDuration(activity.getDuration());&#10;        response.setCaloriesBurned(activity.getCaloriesBurned());&#10;        response.setStartTime(activity.getStartTime());&#10;        response.setAdditionalMetrics(activity.getAdditionalMetrics());&#10;&#10;        Activity existingActivity = activityRepo.findById(id).orElseThrow(() -&gt; new RuntimeException(&quot;Activity not found&quot;));&#10;        existingActivity.updateFromDto(response);&#10;        activityRepo.save(existingActivity);&#10;&#10;        return response;&#10;    }&#10;&#10;    public void deleteActivity(Long id) {&#10;        if (!activityRepo.existsById(id)) {&#10;            throw new RuntimeException(&quot;Activity not found&quot;);&#10;        }&#10;        activityRepo.deleteById(id);&#10;    }&#10;&#10;&#10;    public boolean validateUserEmail(String email) {&#10;        try {&#10;            getUser.getUserByEmail(email);&#10;            return true;&#10;        } catch (Exception e) {&#10;            return false;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/activity_service/src/main/resources/application.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/activity_service/src/main/resources/application.yml" />
              <option name="originalContent" value="spring:&#10;  application:&#10;      name: activity-service&#10;  data:&#10;    mongodb:&#10;      uri: mongodb://root:admin123@localhost:27017/?authSource=admin&#10;      database: activity_db&#10;&#10;server:&#10;  port: 8082&#10;&#10;eureka:&#10;  client:&#10;    serviceUrl:&#10;      defaultZone: http://localhost:8761/eureka/&#10;&#10;&#10;&#10;rabbitmq:&#10;  exchange:&#10;    name:activity-exchange&#10;  queue:&#10;    activity-queue&#10;  routing:&#10;    activity.tracking" />
              <option name="updatedContent" value="spring:&#10;  application:&#10;      name: activity-service&#10;  data:&#10;    mongodb:&#10;      uri: mongodb://root:admin123@localhost:27017/?authSource=admin&#10;      database: activity_db&#10;  rabbitmq:&#10;    host: localhost&#10;    port: 5672&#10;    username: user&#10;    password: password&#10;&#10;server:&#10;  port: 8082&#10;&#10;eureka:&#10;  client:&#10;    serviceUrl:&#10;      defaultZone: http://localhost:8761/eureka/&#10;&#10;rabbitmq:&#10;  exchange:&#10;    name: activity-exchange&#10;  queue: activity-queue&#10;  routing: activity.tracking" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ai_service/src/main/java/com/child1/ai_service/controller/RecommendationController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ai_service/src/main/java/com/child1/ai_service/controller/RecommendationController.java" />
              <option name="originalContent" value="package com.child1.ai_service.controller;&#10;&#10;&#10;import com.child1.ai_service.model.Recommendation;&#10;import com.child1.ai_service.service.Recommendationservice;&#10;import jakarta.validation.Valid;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequiredArgsConstructor&#10;public class RecommendationController {&#10;&#10;    private final Recommendationservice recommendationservice;&#10;&#10;&#10;    @GetMapping&#10;    public ResponseEntity&lt;List&lt;Recommendation&gt;&gt; getRecommendations() {&#10;&#10;        List&lt;Recommendation&gt; recommendations = recommendationservice.getAllRecommendations();&#10;        return ResponseEntity.ok(recommendations);&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Recommendation&gt; getRecommendationById(@PathVariable String id) {&#10;&#10;        Recommendation recommendation = recommendationservice.getActivityRecommendationById(id);&#10;        if (recommendation != null) {&#10;            return ResponseEntity.ok(recommendation);&#10;        } else {&#10;            return ResponseEntity.notFound().build();&#10;&#10;        }&#10;&#10;    }&#10;&#10;    @PostMapping&#10;    public ResponseEntity&lt;Recommendation&gt; createRecommendation(@Valid @RequestBody Recommendation recommendation) {&#10;        Recommendation savedRecommendation = recommendationservice.saveRecommendation(recommendation);&#10;        return ResponseEntity.ok(savedRecommendation);&#10;    }&#10;&#10;    @PutMapping('/{id}')&#10;    public ResponseEntity&lt;Recommendation&gt; updateRecommendation(@PathVariable String id, @Valid @RequestBody Recommendation recommendation) {&#10;&#10;    }&#10;&#10;    @DeleteMapping(&quot;&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteRecommendation(@RequestParam String id) {&#10;        // Assuming there's a method in the service to delete a recommendation by ID&#10;        recommendationservice.deleteRecommendation(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.child1.ai_service.controller;&#10;&#10;&#10;import com.child1.ai_service.model.Recommendation;&#10;import com.child1.ai_service.service.Recommendationservice;&#10;import jakarta.validation.Valid;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequiredArgsConstructor&#10;public class RecommendationController {&#10;&#10;    private final Recommendationservice recommendationservice;&#10;&#10;&#10;    @GetMapping&#10;    public ResponseEntity&lt;List&lt;Recommendation&gt;&gt; getRecommendations() {&#10;&#10;        List&lt;Recommendation&gt; recommendations = recommendationservice.getAllRecommendations();&#10;        return ResponseEntity.ok(recommendations);&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Recommendation&gt; getRecommendationById(@PathVariable String id) {&#10;&#10;        Recommendation recommendation = recommendationservice.getActivityRecommendationById(id);&#10;        if (recommendation != null) {&#10;            return ResponseEntity.ok(recommendation);&#10;        } else {&#10;            return ResponseEntity.notFound().build();&#10;&#10;        }&#10;&#10;    }&#10;&#10;    @PostMapping&#10;    public ResponseEntity&lt;Recommendation&gt; createRecommendation(@Valid @RequestBody Recommendation recommendation) {&#10;        Recommendation savedRecommendation = recommendationservice.saveRecommendation(recommendation);&#10;        return ResponseEntity.ok(savedRecommendation);&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Recommendation&gt; updateRecommendation(@PathVariable String id, @Valid @RequestBody Recommendation recommendation) {&#10;        // Ensure the path id matches the body id (if present)&#10;        if (recommendation.getId() != null &amp;&amp; !id.equals(recommendation.getId())) {&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;        recommendation.setId(id); // Ensure the id is set from the path&#10;        try {&#10;            Recommendation updated = recommendationservice.saveRecommendation(recommendation);&#10;            return ResponseEntity.ok(updated);&#10;        } catch (IllegalArgumentException e) {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;    }&#10;&#10;    @DeleteMapping(&quot;&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteRecommendation(@RequestParam String id) {&#10;        // Assuming there's a method in the service to delete a recommendation by ID&#10;        recommendationservice.deleteRecommendation(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ai_service/src/main/java/com/child1/ai_service/model/Recommendation.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ai_service/src/main/java/com/child1/ai_service/model/Recommendation.java" />
              <option name="originalContent" value="package com.child1.ai_service.model;&#10;&#10;&#10;import lombok.Data;&#10;import org.springframework.data.annotation.CreatedDate;&#10;import org.springframework.data.mongodb.core.mapping.Document;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;&#10;&#10;@Document(collection = &quot;recommendations&quot;)&#10;@Data&#10;public class Recommendation {&#10;&#10;&#10;    private String id;&#10;    private String activityId;&#10;    private String userId;&#10;    private String activityType;&#10;    private String recommendationText;&#10;    private List&lt;String&gt; improvements;&#10;    private List&lt;String&gt; suggestions;&#10;    private List&lt;String&gt; safety;&#10;&#10;    @CreatedDate&#10;    private LocalDateTime createdAt;&#10;&#10;    private LocalDateTime updatedAt;&#10;}&#10;" />
              <option name="updatedContent" value="package com.child1.ai_service.model;&#10;&#10;&#10;import lombok.Data;&#10;import org.springframework.data.annotation.CreatedDate;&#10;import org.springframework.data.mongodb.core.mapping.Document;&#10;&#10;import javax.validation.constraints.NotBlank;&#10;import javax.validation.constraints.NotNull;&#10;import javax.validation.constraints.Size;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;&#10;&#10;@Document(collection = &quot;recommendations&quot;)&#10;@Data&#10;public class Recommendation {&#10;&#10;    @NotBlank&#10;    private String id;&#10;&#10;    @NotBlank&#10;    private String activityId;&#10;&#10;    @NotBlank&#10;    private String userId;&#10;&#10;    @NotBlank&#10;    private String activityType;&#10;&#10;    @NotBlank&#10;    @Size(max = 1000)&#10;    private String recommendationText;&#10;&#10;    @NotNull&#10;    @Size(max = 10)&#10;    private List&lt;@NotBlank String&gt; improvements;&#10;&#10;    @NotNull&#10;    @Size(max = 10)&#10;    private List&lt;@NotBlank String&gt; suggestions;&#10;&#10;    @NotNull&#10;    @Size(max = 10)&#10;    private List&lt;@NotBlank String&gt; safety;&#10;&#10;    @CreatedDate&#10;    private LocalDateTime createdAt;&#10;&#10;    private LocalDateTime updatedAt;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ai_service/src/main/java/com/child1/ai_service/service/Recommendationservice.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ai_service/src/main/java/com/child1/ai_service/service/Recommendationservice.java" />
              <option name="originalContent" value="package com.child1.ai_service.service;&#10;&#10;&#10;import com.child1.ai_service.model.Recommendation;&#10;import com.child1.ai_service.repo.RecommendationRepo;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;public class Recommendationservice {&#10;    private final RecommendationRepo recommendationRepo;&#10;&#10;    public List&lt;Recommendation&gt; getAllRecommendations() {&#10;        return recommendationRepo.findAll();&#10;    }&#10;&#10;    public Recommendation saveRecommendation(Recommendation recommendation) {&#10;&#10;        return recommendationRepo.save(recommendation);&#10;    }&#10;&#10;    public void deleteRecommendation(String id) {&#10;        if (recommendationRepo.existsById(id)) {&#10;            recommendationRepo.deleteById(id);&#10;        } else {&#10;            throw new IllegalArgumentException(&quot;Recommendation with id &quot; + id + &quot; does not exist.&quot;);&#10;        }&#10;    }&#10;&#10;    public Recommendation getActivityRecommendationById(String id) {&#10;        return recommendationRepo.findById(id)&#10;                .orElseThrow(() -&gt; new IllegalArgumentException(&quot;Recommendation with id &quot; + id + &quot; does not exist.&quot;));&#10;        &#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.child1.ai_service.service;&#10;&#10;&#10;import com.child1.ai_service.model.Recommendation;&#10;import com.child1.ai_service.repo.RecommendationRepo;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.validation.annotation.Validated;&#10;&#10;import javax.validation.Valid;&#10;import java.util.List;&#10;&#10;@Service&#10;@Validated&#10;@RequiredArgsConstructor&#10;public class Recommendationservice {&#10;    private final RecommendationRepo recommendationRepo;&#10;&#10;    public List&lt;Recommendation&gt; getAllRecommendations() {&#10;        return recommendationRepo.findAll();&#10;    }&#10;&#10;    public Recommendation saveRecommendation(@Valid Recommendation recommendation) {&#10;        // Additional null check (optional, as @Valid should handle most cases)&#10;        if (recommendation == null) {&#10;            throw new IllegalArgumentException(&quot;Recommendation cannot be null&quot;);&#10;        }&#10;        return recommendationRepo.save(recommendation);&#10;    }&#10;&#10;    public void deleteRecommendation(String id) {&#10;        if (recommendationRepo.existsById(id)) {&#10;            recommendationRepo.deleteById(id);&#10;        } else {&#10;            throw new IllegalArgumentException(&quot;Recommendation with id &quot; + id + &quot; does not exist.&quot;);&#10;        }&#10;    }&#10;&#10;    public Recommendation getActivityRecommendationById(String id) {&#10;        return recommendationRepo.findById(id)&#10;                .orElseThrow(() -&gt; new IllegalArgumentException(&quot;Recommendation with id &quot; + id + &quot; does not exist.&quot;));&#10;        &#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docker-compose.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docker-compose.yml" />
              <option name="originalContent" value="version: '3.8'&#10;&#10;services:&#10;  # PostgreSQL Service&#10;  postgres-db:&#10;    image: postgres:16-alpine&#10;    container_name: my-postgres-container&#10;    environment:&#10;      POSTGRES_USER: admin&#10;      POSTGRES_PASSWORD: admin123&#10;      POSTGRES_DB: mydatabase&#10;    ports:&#10;      - &quot;5432:5432&quot;&#10;    volumes:&#10;      - postgres_data:/var/lib/postgresql/data&#10;    restart: unless-stopped&#10;&#10;  # MongoDB Service&#10;  mongo-db:&#10;    image: mongo:latest&#10;    container_name: my-mongo-container&#10;    environment:&#10;      MONGO_INITDB_ROOT_USERNAME: root&#10;      MONGO_INITDB_ROOT_PASSWORD: admin123&#10;    ports:&#10;      - &quot;27017:27017&quot;&#10;    volumes:&#10;      - mongo_data:/data/db&#10;    restart: unless-stopped&#10;&#10;  # Recommendation MongoDB Service&#10;  recommendation-mongo-db:&#10;    image: mongo:latest&#10;    container_name: recommendation-mongo-container&#10;    environment:&#10;      MONGO_INITDB_ROOT_USERNAME: root&#10;      MONGO_INITDB_ROOT_PASSWORD: admin123&#10;    ports:&#10;      - &quot;27018:27017&quot;&#10;    volumes:&#10;      - recommendation_mongo_data:/data/db&#10;    restart: unless-stopped&#10;&#10;volumes:&#10;  postgres_data:&#10;  mongo_data:&#10;  recommendation_mongo_data:&#10;" />
              <option name="updatedContent" value="version: '3.8'&#10;&#10;services:&#10;  # PostgreSQL Service&#10;  postgres-db:&#10;    image: postgres:16-alpine&#10;    container_name: my-postgres-container&#10;    environment:&#10;      POSTGRES_USER: admin&#10;      POSTGRES_PASSWORD: admin123&#10;      POSTGRES_DB: mydatabase&#10;    ports:&#10;      - &quot;5432:5432&quot;&#10;    volumes:&#10;      - postgres_data:/var/lib/postgresql/data&#10;    restart: unless-stopped&#10;&#10;  # MongoDB Service&#10;  mongo-db:&#10;    image: mongo:latest&#10;    container_name: my-mongo-container&#10;    environment:&#10;      MONGO_INITDB_ROOT_USERNAME: root&#10;      MONGO_INITDB_ROOT_PASSWORD: admin123&#10;    ports:&#10;      - &quot;27017:27017&quot;&#10;    volumes:&#10;      - mongo_data:/data/db&#10;    restart: unless-stopped&#10;&#10;  # Recommendation MongoDB Service&#10;  recommendation-mongo-db:&#10;    image: mongo:latest&#10;    container_name: recommendation-mongo-container&#10;    environment:&#10;      MONGO_INITDB_ROOT_USERNAME: root&#10;      MONGO_INITDB_ROOT_PASSWORD: admin123&#10;    ports:&#10;      - &quot;27018:27017&quot;&#10;    volumes:&#10;      - recommendation_mongo_data:/data/db&#10;    restart: unless-stopped&#10;&#10;  # RabbitMQ Service&#10;  rabbitmq:&#10;    image: rabbitmq:3-management&#10;    container_name: rabbitmq-container&#10;    ports:&#10;      - &quot;5672:5672&quot;&#10;      - &quot;15672:15672&quot;&#10;    environment:&#10;      RABBITMQ_DEFAULT_USER: user&#10;      RABBITMQ_DEFAULT_PASS: password&#10;    restart: unless-stopped&#10;&#10;volumes:&#10;  postgres_data:&#10;  mongo_data:&#10;  recommendation_mongo_data:" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>