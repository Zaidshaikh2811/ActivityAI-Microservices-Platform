<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/ai_service/src/main/java/com/child1/ai_service/service/Recommendationservice.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ai_service/src/main/java/com/child1/ai_service/service/Recommendationservice.java" />
              <option name="originalContent" value="package com.child1.ai_service.service;&#10;&#10;&#10;import com.child1.ai_service.model.Recommendation;&#10;import com.child1.ai_service.repo.RecommendationRepo;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;public class Recommendationservice {&#10;    private final RecommendationRepo recommendationRepo;&#10;&#10;    public List&lt;Recommendation&gt; getAllRecommendations() {&#10;        return recommendationRepo.findAll();&#10;    }&#10;&#10;    public Recommendation saveRecommendation(Recommendation recommendation) {&#10;&#10;        return recommendationRepo.save(recommendation);&#10;    }&#10;&#10;    public void deleteRecommendation(String id) {&#10;        if (recommendationRepo.existsById(id)) {&#10;            recommendationRepo.deleteById(id);&#10;        } else {&#10;            throw new IllegalArgumentException(&quot;Recommendation with id &quot; + id + &quot; does not exist.&quot;);&#10;        }&#10;    }&#10;&#10;    public Recommendation getActivityRecommendationById(String id) {&#10;        return recommendationRepo.findById(id)&#10;                .orElseThrow(() -&gt; new IllegalArgumentException(&quot;Recommendation with id &quot; + id + &quot; does not exist.&quot;));&#10;        &#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.child1.ai_service.service;&#10;&#10;&#10;import com.child1.ai_service.model.Recommendation;&#10;import com.child1.ai_service.repo.RecommendationRepo;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.validation.annotation.Validated;&#10;&#10;import javax.validation.Valid;&#10;import java.util.List;&#10;&#10;@Service&#10;@Validated&#10;@RequiredArgsConstructor&#10;public class Recommendationservice {&#10;    private final RecommendationRepo recommendationRepo;&#10;&#10;    public List&lt;Recommendation&gt; getAllRecommendations() {&#10;        return recommendationRepo.findAll();&#10;    }&#10;&#10;    public Recommendation saveRecommendation(@Valid Recommendation recommendation) {&#10;        // Additional null check (optional, as @Valid should handle most cases)&#10;        if (recommendation == null) {&#10;            throw new IllegalArgumentException(&quot;Recommendation cannot be null&quot;);&#10;        }&#10;        return recommendationRepo.save(recommendation);&#10;    }&#10;&#10;    public void deleteRecommendation(String id) {&#10;        if (recommendationRepo.existsById(id)) {&#10;            recommendationRepo.deleteById(id);&#10;        } else {&#10;            throw new IllegalArgumentException(&quot;Recommendation with id &quot; + id + &quot; does not exist.&quot;);&#10;        }&#10;    }&#10;&#10;    public Recommendation getActivityRecommendationById(String id) {&#10;        return recommendationRepo.findById(id)&#10;                .orElseThrow(() -&gt; new IllegalArgumentException(&quot;Recommendation with id &quot; + id + &quot; does not exist.&quot;));&#10;        &#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/start-all.sh">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/start-all.sh" />
              <option name="updatedContent" value="#!/bin/bash&#10;&#10;# Start Docker Compose for DB, RabbitMQ, etc.&#10;echo &quot;Starting Docker Compose containers...&quot;&#10;docker-compose up -d&#10;&#10;# Wait for DB and RabbitMQ to be healthy (adjust as needed)&#10;echo &quot;Waiting for DB and RabbitMQ to be ready...&quot;&#10;sleep 15&#10;&#10;# Start Config Server&#10;cd config_server&#10;nohup ./mvnw spring-boot:run &gt; config_server.log 2&gt;&amp;1 &amp;&#10;cd ..&#10;echo &quot;Config Server started.&quot;&#10;sleep 10&#10;&#10;# Start Eureka Server&#10;cd eureka&#10;nohup ./mvnw spring-boot:run &gt; eureka.log 2&gt;&amp;1 &amp;&#10;cd ..&#10;echo &quot;Eureka Server started.&quot;&#10;sleep 10&#10;&#10;# Start Gateway&#10;cd gateway&#10;nohup ./mvnw spring-boot:run &gt; gateway.log 2&gt;&amp;1 &amp;&#10;cd ..&#10;echo &quot;Gateway started.&quot;&#10;sleep 10&#10;&#10;# Start Activity Service&#10;cd activity_service&#10;nohup ./mvnw spring-boot:run &gt; activity_service.log 2&gt;&amp;1 &amp;&#10;cd ..&#10;echo &quot;Activity Service started.&quot;&#10;sleep 5&#10;&#10;# Start AI Service&#10;cd ai_service&#10;nohup ./mvnw spring-boot:run &gt; ai_service.log 2&gt;&amp;1 &amp;&#10;cd ..&#10;echo &quot;AI Service started.&quot;&#10;sleep 5&#10;&#10;# Start Auth Service&#10;cd auth_service&#10;nohup ./mvnw spring-boot:run &gt; auth_service.log 2&gt;&amp;1 &amp;&#10;cd ..&#10;echo &quot;Auth Service started.&quot;&#10;sleep 5&#10;&#10;# Start User Service&#10;cd user_service&#10;nohup ./mvnw spring-boot:run &gt; user_service.log 2&gt;&amp;1 &amp;&#10;cd ..&#10;echo &quot;User Service started.&quot;&#10;sleep 5&#10;&#10;echo &quot;All microservices started. Check individual *.log files for output.&quot;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>