<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/activity_service/src/main/java/com/child1/activity_service/Model/Activity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/activity_service/src/main/java/com/child1/activity_service/Model/Activity.java" />
              <option name="originalContent" value="package com.child1.activity_service.Model;&#10;&#10;&#10;import com.child1.activity_service.Dto.ActivityResponseDto;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import org.springframework.data.annotation.CreatedDate;&#10;import org.springframework.data.annotation.Id;&#10;import org.springframework.data.annotation.LastModifiedDate;&#10;import org.springframework.data.mongodb.core.mapping.Document;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.Map;&#10;&#10;&#10;@Document(collection = &quot;activities&quot;)&#10;@Data&#10;@Builder&#10;@AllArgsConstructor&#10;@NoArgsConstructor&#10;public class Activity {&#10;    @Id&#10;    private String id;&#10;&#10;    private String userId;&#10;&#10;    private ActivitType activityType;&#10;    private Integer duration;&#10;    private Integer caloriesBurned;&#10;    private LocalDateTime startTime;&#10;&#10;    private Map&lt;String, Object&gt; additionalMetrics;&#10;&#10;    @CreatedDate&#10;    private LocalDateTime createdAt;&#10;    @LastModifiedDate&#10;    private LocalDateTime updatedAt;&#10;&#10;&#10;    public void updateFromDto(ActivityResponseDto response) {&#10;        this.activityType = response.getActivityType();&#10;        this.duration = response.getDuration();&#10;        this.caloriesBurned = response.getCaloriesBurned();&#10;        this.startTime = response.getStartTime();&#10;        this.additionalMetrics = response.getAdditionalMetrics();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.child1.activity_service.Model;&#10;&#10;&#10;import com.child1.activity_service.Dto.ActivityResponseDto;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import org.springframework.data.annotation.CreatedDate;&#10;import org.springframework.data.annotation.Id;&#10;import org.springframework.data.annotation.LastModifiedDate;&#10;import org.springframework.data.mongodb.core.mapping.Document;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.Map;&#10;&#10;&#10;@Document(collection = &quot;activities&quot;)&#10;@Data&#10;@Builder&#10;@AllArgsConstructor&#10;@NoArgsConstructor&#10;public class Activity {&#10;    @Id&#10;    private String id; // MongoDB will auto-generate this if not provided&#10;&#10;    private String userId;&#10;&#10;    private ActivitType activityType;&#10;    private Integer duration;&#10;    private Integer caloriesBurned;&#10;    private LocalDateTime startTime;&#10;&#10;    private Map&lt;String, Object&gt; additionalMetrics;&#10;&#10;    @CreatedDate&#10;    private LocalDateTime createdAt;&#10;    @LastModifiedDate&#10;    private LocalDateTime updatedAt;&#10;&#10;&#10;    public void updateFromDto(ActivityResponseDto response) {&#10;        this.activityType = response.getActivityType();&#10;        this.duration = response.getDuration();&#10;        this.caloriesBurned = response.getCaloriesBurned();&#10;        this.startTime = response.getStartTime();&#10;        this.additionalMetrics = response.getAdditionalMetrics();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/activity_service/src/main/java/com/child1/activity_service/service/ActivityService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/activity_service/src/main/java/com/child1/activity_service/service/ActivityService.java" />
              <option name="originalContent" value="package com.child1.activity_service.service;&#10;&#10;&#10;import com.child1.activity_service.Dto.ActivityRequestDto;&#10;import com.child1.activity_service.Dto.ActivityResponseDto;&#10;import com.child1.activity_service.Model.Activity;&#10;import com.child1.activity_service.repo.ActivityRepo;&#10;import org.springframework.amqp.rabbit.core.RabbitTemplate;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;&#10;@Service&#10;public class ActivityService {&#10;&#10;    private ActivityRepo activityRepo;&#10;    private final GetUser getUser;&#10;    private RabbitTemplate rabbitTemplate;&#10;    public ActivityService(ActivityRepo activityRepo, GetUser getUser, RabbitTemplate rabbitTemplate) {&#10;        this.activityRepo = activityRepo;&#10;        this.rabbitTemplate = rabbitTemplate;&#10;        this.getUser = getUser;&#10;    }&#10;&#10;&#10;    @Value(&quot;${rabbitmq.exchange.name}&quot;)&#10;    private String exchange;&#10;    @Value(&quot;${rabbitmq.routing.key}&quot;)&#10;    private String routingKey;&#10;    @Value(&quot;${rabbitmq.queue.name}&quot;)&#10;    private String queueName;&#10;&#10;&#10;    public List&lt;ActivityResponseDto&gt; getAllActivities() {&#10;        List&lt;Activity&gt; activityList = activityRepo.findAll();&#10;        if (activityList.isEmpty()) {&#10;            throw new IllegalStateException(&quot;No activities found&quot;);&#10;        }&#10;        return activityList.stream()&#10;                .map(activity -&gt; {&#10;                    ActivityResponseDto response = new ActivityResponseDto();&#10;                    response.setId(activity.getId());&#10;                    response.setUserId(activity.getUserId());&#10;                    response.setActivityType(activity.getActivityType());&#10;                    response.setDuration(activity.getDuration());&#10;                    response.setCaloriesBurned(activity.getCaloriesBurned());&#10;                    response.setStartTime(activity.getStartTime());&#10;                    response.setAdditionalMetrics(activity.getAdditionalMetrics());&#10;                    return response;&#10;                }).toList();&#10;&#10;&#10;&#10;    }&#10;&#10;    public ActivityResponseDto createActivity(ActivityRequestDto activity) {&#10;&#10;&#10;        ActivityResponseDto response = new ActivityResponseDto();&#10;        response.setUserId(activity.getUserId());&#10;        response.setActivityType(activity.getActivityType());&#10;        response.setDuration(activity.getDuration());&#10;        response.setCaloriesBurned(activity.getCaloriesBurned());&#10;        response.setStartTime(activity.getStartTime());&#10;        response.setAdditionalMetrics(activity.getAdditionalMetrics());&#10;        response.setId(null);&#10;&#10;        activityRepo.save(response.toEntity());&#10;&#10;&#10;&#10;        try{&#10;            rabbitTemplate.convertAndSend(exchange, routingKey, response);&#10;            System.out.println(&quot;Activity sent to RabbitMQ: &quot; + response);&#10;&#10;&#10;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Failed to send activity to RabbitMQ: &quot; + e.getMessage());&#10;            throw new RuntimeException(&quot;Failed to send activity to RabbitMQ&quot;, e);&#10;        }&#10;&#10;&#10;&#10;        return response;&#10;&#10;    }&#10;&#10;    public ActivityResponseDto updateActivity(Long id, ActivityRequestDto activity) {&#10;&#10;&#10;&#10;        ActivityResponseDto response = new ActivityResponseDto();&#10;        response.setActivityType(activity.getActivityType());&#10;        response.setDuration(activity.getDuration());&#10;        response.setCaloriesBurned(activity.getCaloriesBurned());&#10;        response.setStartTime(activity.getStartTime());&#10;        response.setAdditionalMetrics(activity.getAdditionalMetrics());&#10;&#10;        Activity existingActivity = activityRepo.findById(id).orElseThrow(() -&gt; new RuntimeException(&quot;Activity not found&quot;));&#10;        existingActivity.updateFromDto(response);&#10;        activityRepo.save(existingActivity);&#10;&#10;        return response;&#10;    }&#10;&#10;    public void deleteActivity(Long id) {&#10;        if (!activityRepo.existsById(id)) {&#10;            throw new RuntimeException(&quot;Activity not found&quot;);&#10;        }&#10;        activityRepo.deleteById(id);&#10;    }&#10;&#10;&#10;    public boolean validateUserEmail(String email) {&#10;        try {&#10;            getUser.getUserByEmail(email);&#10;            return true;&#10;        } catch (Exception e) {&#10;            return false;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.child1.activity_service.service;&#10;&#10;&#10;import com.child1.activity_service.Dto.ActivityRequestDto;&#10;import com.child1.activity_service.Dto.ActivityResponseDto;&#10;import com.child1.activity_service.Model.Activity;&#10;import com.child1.activity_service.repo.ActivityRepo;&#10;import org.springframework.amqp.rabbit.core.RabbitTemplate;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;&#10;@Service&#10;public class ActivityService {&#10;&#10;    private ActivityRepo activityRepo;&#10;    private final GetUser getUser;&#10;    private RabbitTemplate rabbitTemplate;&#10;    public ActivityService(ActivityRepo activityRepo, GetUser getUser, RabbitTemplate rabbitTemplate) {&#10;        this.activityRepo = activityRepo;&#10;        this.rabbitTemplate = rabbitTemplate;&#10;        this.getUser = getUser;&#10;    }&#10;&#10;&#10;    @Value(&quot;${rabbitmq.exchange.name}&quot;)&#10;    private String exchange;&#10;    @Value(&quot;${rabbitmq.routing.key}&quot;)&#10;    private String routingKey;&#10;    @Value(&quot;${rabbitmq.queue.name}&quot;)&#10;    private String queueName;&#10;&#10;&#10;    public List&lt;ActivityResponseDto&gt; getAllActivities() {&#10;        List&lt;Activity&gt; activityList = activityRepo.findAll();&#10;        if (activityList.isEmpty()) {&#10;            throw new IllegalStateException(&quot;No activities found&quot;);&#10;        }&#10;        return activityList.stream()&#10;                .map(activity -&gt; {&#10;                    ActivityResponseDto response = new ActivityResponseDto();&#10;                    response.setId(activity.getId());&#10;                    response.setUserId(activity.getUserId());&#10;                    response.setActivityType(activity.getActivityType());&#10;                    response.setDuration(activity.getDuration());&#10;                    response.setCaloriesBurned(activity.getCaloriesBurned());&#10;                    response.setStartTime(activity.getStartTime());&#10;                    response.setAdditionalMetrics(activity.getAdditionalMetrics());&#10;                    return response;&#10;                }).toList();&#10;&#10;&#10;&#10;    }&#10;&#10;    public ActivityResponseDto createActivity(ActivityRequestDto activity) {&#10;        // Convert DTO to entity and save to DB&#10;        Activity entity = activity.toEntity();&#10;        Activity savedEntity = activityRepo.save(entity);&#10;&#10;        // Convert saved entity to response DTO (with generated id)&#10;        ActivityResponseDto response = new ActivityResponseDto();&#10;        response.setId(savedEntity.getId());&#10;        response.setUserId(savedEntity.getUserId());&#10;        response.setActivityType(savedEntity.getActivityType());&#10;        response.setDuration(savedEntity.getDuration());&#10;        response.setCaloriesBurned(savedEntity.getCaloriesBurned());&#10;        response.setStartTime(savedEntity.getStartTime());&#10;        response.setAdditionalMetrics(savedEntity.getAdditionalMetrics());&#10;&#10;        try {&#10;            // Send the full saved entity (with id) to RabbitMQ&#10;            rabbitTemplate.convertAndSend(exchange, routingKey, savedEntity);&#10;            System.out.println(&quot;Activity sent to RabbitMQ: &quot; + savedEntity);&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Failed to send activity to RabbitMQ: &quot; + e.getMessage());&#10;            throw new RuntimeException(&quot;Failed to send activity to RabbitMQ&quot;, e);&#10;        }&#10;        return response;&#10;    }&#10;&#10;    public ActivityResponseDto updateActivity(Long id, ActivityRequestDto activity) {&#10;&#10;&#10;&#10;        ActivityResponseDto response = new ActivityResponseDto();&#10;        response.setActivityType(activity.getActivityType());&#10;        response.setDuration(activity.getDuration());&#10;        response.setCaloriesBurned(activity.getCaloriesBurned());&#10;        response.setStartTime(activity.getStartTime());&#10;        response.setAdditionalMetrics(activity.getAdditionalMetrics());&#10;&#10;        Activity existingActivity = activityRepo.findById(id).orElseThrow(() -&gt; new RuntimeException(&quot;Activity not found&quot;));&#10;        existingActivity.updateFromDto(response);&#10;        activityRepo.save(existingActivity);&#10;&#10;        return response;&#10;    }&#10;&#10;    public void deleteActivity(Long id) {&#10;        if (!activityRepo.existsById(id)) {&#10;            throw new RuntimeException(&quot;Activity not found&quot;);&#10;        }&#10;        activityRepo.deleteById(id);&#10;    }&#10;&#10;&#10;    public boolean validateUserEmail(String email) {&#10;        try {&#10;            getUser.getUserByEmail(email);&#10;            return true;&#10;        } catch (Exception e) {&#10;            return false;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ai_service/src/main/java/com/child1/ai_service/model/Activity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ai_service/src/main/java/com/child1/ai_service/model/Activity.java" />
              <option name="originalContent" value="package com.child1.ai_service.model;&#10;&#10;import jakarta.validation.constraints.Min;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.NotNull;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import org.springframework.data.annotation.Id;&#10;import org.springframework.data.mongodb.core.mapping.Document;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.Map;&#10;&#10;&#10;&#10;@Document(collection = &quot;activities&quot;)&#10;@Data&#10;@Builder&#10;@AllArgsConstructor&#10;@NoArgsConstructor&#10;public class Activity {&#10;    @NotBlank(message = &quot;Activity ID is required&quot;)&#10;    private String id;&#10;&#10;    @NotBlank(message = &quot;User ID is required&quot;)&#10;    private String userId;&#10;&#10;    @NotNull(message = &quot;Activity type is required&quot;)&#10;    private ActivitType activityType;&#10;&#10;    @NotNull(message = &quot;Duration is required&quot;)&#10;    @Min(value = 1, message = &quot;Duration must be at least 1 minute&quot;)&#10;    private Integer duration;&#10;&#10;    @NotNull(message = &quot;Calories burned is required&quot;)&#10;    @Min(value = 0, message = &quot;Calories burned cannot be negative&quot;)&#10;    private Integer caloriesBurned;&#10;&#10;    @NotNull(message = &quot;Start time is required&quot;)&#10;    private LocalDateTime startTime;&#10;&#10;    private Map&lt;String, Object&gt; additionalMetrics;&#10;&#10;    private LocalDateTime createdAt;&#10;    private LocalDateTime updatedAt;&#10;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.child1.ai_service.model;&#10;&#10;import jakarta.validation.constraints.Min;&#10;import jakarta.validation.constraints.NotNull;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import org.springframework.data.annotation.Id;&#10;import org.springframework.data.mongodb.core.mapping.Document;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.Map;&#10;&#10;&#10;&#10;@Document(collection = &quot;activities&quot;)&#10;@Data&#10;@Builder&#10;@AllArgsConstructor&#10;@NoArgsConstructor&#10;public class Activity {&#10;    @Id&#10;    private String id;&#10;&#10;    @NotNull(message = &quot;User ID is required&quot;)&#10;    private Long userId;&#10;&#10;    @NotNull(message = &quot;Activity type is required&quot;)&#10;    private ActivitType activityType;&#10;&#10;    @NotNull(message = &quot;Duration is required&quot;)&#10;    @Min(value = 1, message = &quot;Duration must be at least 1 minute&quot;)&#10;    private Integer duration;&#10;&#10;    @NotNull(message = &quot;Calories burned is required&quot;)&#10;    @Min(value = 0, message = &quot;Calories burned cannot be negative&quot;)&#10;    private Integer caloriesBurned;&#10;&#10;    @NotNull(message = &quot;Start time is required&quot;)&#10;    private LocalDateTime startTime;&#10;&#10;    private Map&lt;String, Object&gt; additionalMetrics;&#10;&#10;    private LocalDateTime createdAt;&#10;    private LocalDateTime updatedAt;&#10;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ai_service/src/main/java/com/child1/ai_service/service/ActivityMessListner.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ai_service/src/main/java/com/child1/ai_service/service/ActivityMessListner.java" />
              <option name="originalContent" value="package com.child1.ai_service.service;&#10;&#10;&#10;import com.child1.ai_service.model.Activity;&#10;import com.child1.ai_service.model.Recommendation;&#10;import com.child1.ai_service.repo.RecommendationRepo;&#10;import com.fasterxml.jackson.databind.JsonNode;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.amqp.rabbit.annotation.RabbitListener;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;@Service&#10;@Slf4j&#10;@RequiredArgsConstructor&#10;public class ActivityMessListner {&#10;&#10;&#10;    private final GeminiService geminiService;&#10;&#10;    private final RecommendationRepo recommendationRepo;&#10;&#10;    @RabbitListener(queues = &quot;activity-queue&quot;)&#10;    public void receiveMessage(Activity activity) {&#10;        try {&#10;&#10;            if (activity == null  ) {&#10;                log.error(&quot;Activity or Activity ID is null&quot;);&#10;                return;&#10;            }&#10;&#10;&#10;&#10;            String prompt = createPromptForActivity(activity);&#10;&#10;           String response = geminiService.getResponse(prompt);&#10;             processResponse(activity, response);&#10;&#10;        } catch (Exception e) {&#10;            log.error(&quot;Error processing activity message: &quot;, e);&#10;            &#10;            &#10;&#10;        }&#10;    }&#10;&#10;&#10;    private String createPromptForActivity(Activity activity) {&#10;        return String.format(&quot;&quot;&quot;&#10;        Analyze this fitness activity and provide detailed recommendations in the following EXACT JSON format:&#10;        {&#10;          &quot;analysis&quot;: {&#10;            &quot;overall&quot;: &quot;Overall analysis here&quot;,&#10;            &quot;pace&quot;: &quot;Pace analysis here&quot;,&#10;            &quot;heartRate&quot;: &quot;Heart rate analysis here&quot;,&#10;            &quot;caloriesBurned&quot;: &quot;Calories analysis here&quot;&#10;          },&#10;          &quot;improvements&quot;: [&#10;            {&#10;              &quot;area&quot;: &quot;Area name&quot;,&#10;              &quot;recommendation&quot;: &quot;Detailed recommendation&quot;&#10;            }&#10;          ],&#10;          &quot;suggestions&quot;: [&#10;            {&#10;              &quot;workout&quot;: &quot;Workout name&quot;,&#10;              &quot;description&quot;: &quot;Detailed workout description&quot;&#10;            }&#10;          ],&#10;          &quot;safety&quot;: [&#10;            &quot;Safety point 1&quot;,&#10;            &quot;Safety point 2&quot;&#10;          ]&#10;        }&#10;&#10;        Analyze this activity:&#10;        Activity Type: %s&#10;        Duration: %d minutes&#10;        Calories Burned: %d&#10;        Additional Metrics: %s&#10;        &#10;        Provide detailed analysis focusing on performance, improvements, next workout suggestions, and safety guidelines.&#10;        Ensure the response follows the EXACT JSON format shown above.&#10;        &quot;&quot;&quot;,&#10;                activity.getActivityType(),&#10;                activity.getDuration(),&#10;                activity.getCaloriesBurned(),&#10;                activity.getAdditionalMetrics()&#10;        );&#10;    }&#10;&#10;&#10;    private String processResponse(Activity activity, String response) {&#10;        try{&#10;            if (response == null || response.isEmpty()) {&#10;                log.warn(&quot;Received empty response for activity ID: {}&quot;, activity.getId());&#10;                return &quot;No response from Gemini API&quot;;&#10;            }&#10;            ObjectMapper objectMapper = new ObjectMapper();&#10;            JsonNode rootNode = objectMapper.readTree(response);&#10;&#10;&#10;            JsonNode candidatesNode = rootNode.get(&quot;candidates&quot;);&#10;            if (candidatesNode == null || !candidatesNode.isArray() || candidatesNode.size() == 0) {&#10;                log.warn(&quot;No candidates found in response for activity ID: {}&quot;, activity.getId());&#10;                return &quot;No candidates found in response&quot;;&#10;            }&#10;            JsonNode partsNode = candidatesNode.get(0).get(&quot;content&quot;).get(&quot;parts&quot;);&#10;            if (partsNode == null || !partsNode.isArray() || partsNode.size() == 0) {&#10;                log.warn(&quot;No parts found in response for activity ID: {}&quot;, activity.getId());&#10;                return &quot;No parts found in response&quot;;&#10;            }&#10;            String text = partsNode.get(0).get(&quot;text&quot;).asText();&#10;&#10;            // Clean the response: remove code block markers and extract JSON&#10;            String cleanedText = text.trim();&#10;            if (cleanedText.startsWith(&quot;```&quot;)) {&#10;                cleanedText = cleanedText.substring(3);&#10;            }&#10;            if (cleanedText.endsWith(&quot;```&quot;)) {&#10;                cleanedText = cleanedText.substring(0, cleanedText.length() - 3);&#10;            }&#10;            cleanedText = cleanedText.trim();&#10;            // Optionally, extract only the JSON part&#10;            int firstBrace = cleanedText.indexOf('{');&#10;            int lastBrace = cleanedText.lastIndexOf('}');&#10;            if (firstBrace != -1 &amp;&amp; lastBrace != -1 &amp;&amp; lastBrace &gt; firstBrace) {&#10;                cleanedText = cleanedText.substring(firstBrace, lastBrace + 1);&#10;            }&#10;            JsonNode activityNode = objectMapper.readTree(cleanedText);&#10;            if (activityNode == null) {&#10;                log.warn(&quot;No activity data found in response for activity ID: {}&quot;, activity.getId());&#10;                return &quot;No activity data found in response&quot;;&#10;            }&#10;            System.out.println(&quot;Activity Node: &quot; + activityNode);&#10;&#10;            // Extract analysis as a readable string (e.g., overall + details)&#10;            StringBuilder analysisBuilder = new StringBuilder();&#10;            if (activityNode.has(&quot;analysis&quot;)) {&#10;                JsonNode analysisNode = activityNode.get(&quot;analysis&quot;);&#10;                if (analysisNode.has(&quot;overall&quot;)) {&#10;                    analysisBuilder.append(&quot;Overall: &quot;).append(analysisNode.get(&quot;overall&quot;).asText()).append(&quot;\n&quot;);&#10;                }&#10;                if (analysisNode.has(&quot;pace&quot;)) {&#10;                    analysisBuilder.append(&quot;Pace: &quot;).append(analysisNode.get(&quot;pace&quot;).asText()).append(&quot;\n&quot;);&#10;                }&#10;                if (analysisNode.has(&quot;heartRate&quot;)) {&#10;                    analysisBuilder.append(&quot;Heart Rate: &quot;).append(analysisNode.get(&quot;heartRate&quot;).asText()).append(&quot;\n&quot;);&#10;                }&#10;                if (analysisNode.has(&quot;caloriesBurned&quot;)) {&#10;                    analysisBuilder.append(&quot;Calories Burned: &quot;).append(analysisNode.get(&quot;caloriesBurned&quot;).asText()).append(&quot;\n&quot;);&#10;                }&#10;            }&#10;            String analysis = analysisBuilder.toString().trim();&#10;&#10;            // Improvements as readable string list&#10;            List&lt;String&gt; improvementsList = new ArrayList&lt;&gt;();&#10;            if (activityNode.has(&quot;improvements&quot;)) {&#10;                for (JsonNode imp : activityNode.get(&quot;improvements&quot;)) {&#10;                    String area = imp.has(&quot;area&quot;) ? imp.get(&quot;area&quot;).asText() : &quot;&quot;;&#10;                    String rec = imp.has(&quot;recommendation&quot;) ? imp.get(&quot;recommendation&quot;).asText() : &quot;&quot;;&#10;                    improvementsList.add(area + &quot;: &quot; + rec);&#10;                }&#10;            }&#10;&#10;            // Suggestions as readable string list&#10;            List&lt;String&gt; suggestionsList = new ArrayList&lt;&gt;();&#10;            if (activityNode.has(&quot;suggestions&quot;)) {&#10;                for (JsonNode sug : activityNode.get(&quot;suggestions&quot;)) {&#10;                    String workout = sug.has(&quot;workout&quot;) ? sug.get(&quot;workout&quot;).asText() : &quot;&quot;;&#10;                    String desc = sug.has(&quot;description&quot;) ? sug.get(&quot;description&quot;).asText() : &quot;&quot;;&#10;                    suggestionsList.add(workout + &quot;: &quot; + desc);&#10;                }&#10;            }&#10;&#10;            // Safety as readable string list&#10;            List&lt;String&gt; safetyList = new ArrayList&lt;&gt;();&#10;            if (activityNode.has(&quot;safety&quot;)) {&#10;                for (JsonNode safe : activityNode.get(&quot;safety&quot;)) {&#10;                    safetyList.add(safe.asText());&#10;                }&#10;            }&#10;&#10;            Recommendation recommendation = new Recommendation();&#10;            recommendation.setActivityId(activity.getId());&#10;            recommendation.setUserId(String.valueOf(activity.getUserId()));&#10;            recommendation.setActivityType(String.valueOf(activity.getActivityType()));&#10;            recommendation.setRecommendationText(analysis);&#10;            recommendation.setImprovements(improvementsList);&#10;            recommendation.setSuggestions(suggestionsList);&#10;            recommendation.setSafety(safetyList);&#10;            recommendationRepo.save(recommendation);&#10;&#10;&#10;&#10;&#10;            return String.format(&quot;Activity ID: %s processed successfully. Analysis: %s, Improvements: %s, Suggestions: %s, Safety: %s&quot;,&#10;                    activity.getId(), analysis, improvementsList, suggestionsList, safetyList);&#10;        } catch (Exception e) {&#10;            log.error(&quot;Error processing Gemini response for activity ID: {}&quot;, activity.getId(), e);&#10;            return &quot;Error processing Gemini response: &quot; + e.getMessage();&#10;        }&#10;    }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.child1.ai_service.service;&#10;&#10;&#10;import com.child1.ai_service.model.Activity;&#10;import com.child1.ai_service.model.Recommendation;&#10;import com.child1.ai_service.repo.RecommendationRepo;&#10;import com.fasterxml.jackson.databind.JsonNode;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.amqp.rabbit.annotation.RabbitListener;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;@Service&#10;@Slf4j&#10;@RequiredArgsConstructor&#10;public class ActivityMessListner {&#10;&#10;&#10;    private final GeminiService geminiService;&#10;&#10;    private final RecommendationRepo recommendationRepo;&#10;&#10;    @RabbitListener(queues = &quot;activity-queue&quot;)&#10;    public void receiveMessage(Activity activity) {&#10;        if (activity == null) {&#10;            log.error(&quot;Activity is null&quot;);&#10;            return;&#10;        }&#10;        try {&#10;            String prompt = createPromptForActivity(activity);&#10;            String response = geminiService.getResponse(prompt);&#10;            processResponse(activity, response);&#10;        } catch (Exception e) {&#10;            log.error(&quot;Error processing activity message: &quot;, e);&#10;        }&#10;    }&#10;&#10;    private String createPromptForActivity(Activity activity) {&#10;        return String.format(&quot;&quot;&quot;&#10;        Analyze this fitness activity and provide detailed recommendations in the following EXACT JSON format:&#10;        {&#10;          \&quot;analysis\&quot;: {&#10;            \&quot;overall\&quot;: \&quot;Overall analysis here\&quot;,&#10;            \&quot;pace\&quot;: \&quot;Pace analysis here\&quot;,&#10;            \&quot;heartRate\&quot;: \&quot;Heart rate analysis here\&quot;,&#10;            \&quot;caloriesBurned\&quot;: \&quot;Calories analysis here\&quot;&#10;          },&#10;          \&quot;improvements\&quot;: [&#10;            {&#10;              \&quot;area\&quot;: \&quot;Area name\&quot;,&#10;              \&quot;recommendation\&quot;: \&quot;Detailed recommendation\&quot;&#10;            }&#10;          ],&#10;          \&quot;suggestions\&quot;: [&#10;            {&#10;              \&quot;workout\&quot;: \&quot;Workout name\&quot;,&#10;              \&quot;description\&quot;: \&quot;Detailed workout description\&quot;&#10;            }&#10;          ],&#10;          \&quot;safety\&quot;: [&#10;            \&quot;Safety point 1\&quot;,&#10;            \&quot;Safety point 2\&quot;&#10;          ]&#10;        }&#10;&#10;        Analyze this activity:&#10;        Activity Type: %s&#10;        Duration: %d minutes&#10;        Calories Burned: %d&#10;        Additional Metrics: %s&#10;        Provide detailed analysis focusing on performance, improvements, next workout suggestions, and safety guidelines.&#10;        Ensure the response follows the EXACT JSON format shown above.&#10;        &quot;&quot;&quot;,&#10;                activity.getActivityType(),&#10;                activity.getDuration(),&#10;                activity.getCaloriesBurned(),&#10;                activity.getAdditionalMetrics()&#10;        );&#10;    }&#10;&#10;    private String processResponse(Activity activity, String response) {&#10;        if (response == null || response.isEmpty()) {&#10;            log.warn(&quot;Received empty response for activity ID: {}&quot;, activity.getId());&#10;            return &quot;No response from Gemini API&quot;;&#10;        }&#10;        try {&#10;            ObjectMapper objectMapper = new ObjectMapper();&#10;            JsonNode rootNode = objectMapper.readTree(response);&#10;            JsonNode candidatesNode = rootNode.path(&quot;candidates&quot;);&#10;            if (!candidatesNode.isArray() || candidatesNode.isEmpty()) {&#10;                log.warn(&quot;No candidates found in response for activity ID: {}&quot;, activity.getId());&#10;                return &quot;No candidates found in response&quot;;&#10;            }&#10;            JsonNode partsNode = candidatesNode.get(0).path(&quot;content&quot;).path(&quot;parts&quot;);&#10;            if (!partsNode.isArray() || partsNode.isEmpty()) {&#10;                log.warn(&quot;No parts found in response for activity ID: {}&quot;, activity.getId());&#10;                return &quot;No parts found in response&quot;;&#10;            }&#10;            String text = partsNode.get(0).path(&quot;text&quot;).asText(&quot;&quot;);&#10;            if (text.isEmpty()) {&#10;                log.warn(&quot;No text found in Gemini response for activity ID: {}&quot;, activity.getId());&#10;                return &quot;No text found in Gemini response&quot;;&#10;            }&#10;            // Clean code block markers if present&#10;            String cleanedText = text.trim();&#10;            if (cleanedText.startsWith(&quot;```&quot;) &amp;&amp; cleanedText.endsWith(&quot;```&quot;) &amp;&amp; cleanedText.length() &gt; 6) {&#10;                cleanedText = cleanedText.substring(3, cleanedText.length() - 3).trim();&#10;            }&#10;            int firstBrace = cleanedText.indexOf('{');&#10;            int lastBrace = cleanedText.lastIndexOf('}');&#10;            if (firstBrace != -1 &amp;&amp; lastBrace != -1 &amp;&amp; lastBrace &gt; firstBrace) {&#10;                cleanedText = cleanedText.substring(firstBrace, lastBrace + 1);&#10;            }&#10;            JsonNode activityNode = objectMapper.readTree(cleanedText);&#10;            if (activityNode == null) {&#10;                log.warn(&quot;No activity data found in response for activity ID: {}&quot;, activity.getId());&#10;                return &quot;No activity data found in response&quot;;&#10;            }&#10;            // Extract analysis as a readable string&#10;            StringBuilder analysisBuilder = new StringBuilder();&#10;            JsonNode analysisNode = activityNode.path(&quot;analysis&quot;);&#10;            if (analysisNode.has(&quot;overall&quot;)) {&#10;                analysisBuilder.append(&quot;Overall: &quot;).append(analysisNode.path(&quot;overall&quot;).asText(&quot;&quot;)).append(&quot;\n&quot;);&#10;            }&#10;            if (analysisNode.has(&quot;pace&quot;)) {&#10;                analysisBuilder.append(&quot;Pace: &quot;).append(analysisNode.path(&quot;pace&quot;).asText(&quot;&quot;)).append(&quot;\n&quot;);&#10;            }&#10;            if (analysisNode.has(&quot;heartRate&quot;)) {&#10;                analysisBuilder.append(&quot;Heart Rate: &quot;).append(analysisNode.path(&quot;heartRate&quot;).asText(&quot;&quot;)).append(&quot;\n&quot;);&#10;            }&#10;            if (analysisNode.has(&quot;caloriesBurned&quot;)) {&#10;                analysisBuilder.append(&quot;Calories Burned: &quot;).append(analysisNode.path(&quot;caloriesBurned&quot;).asText(&quot;&quot;)).append(&quot;\n&quot;);&#10;            }&#10;            String analysis = analysisBuilder.toString().trim();&#10;            // Improvements as readable string list&#10;            List&lt;String&gt; improvementsList = new ArrayList&lt;&gt;();&#10;            JsonNode improvementsNode = activityNode.path(&quot;improvements&quot;);&#10;            if (improvementsNode.isArray()) {&#10;                for (JsonNode imp : improvementsNode) {&#10;                    String area = imp.path(&quot;area&quot;).asText(&quot;&quot;);&#10;                    String rec = imp.path(&quot;recommendation&quot;).asText(&quot;&quot;);&#10;                    if (!area.isEmpty() || !rec.isEmpty()) {&#10;                        improvementsList.add(area + &quot;: &quot; + rec);&#10;                    }&#10;                }&#10;            }&#10;            // Suggestions as readable string list&#10;            List&lt;String&gt; suggestionsList = new ArrayList&lt;&gt;();&#10;            JsonNode suggestionsNode = activityNode.path(&quot;suggestions&quot;);&#10;            if (suggestionsNode.isArray()) {&#10;                for (JsonNode sug : suggestionsNode) {&#10;                    String workout = sug.path(&quot;workout&quot;).asText(&quot;&quot;);&#10;                    String desc = sug.path(&quot;description&quot;).asText(&quot;&quot;);&#10;                    if (!workout.isEmpty() || !desc.isEmpty()) {&#10;                        suggestionsList.add(workout + &quot;: &quot; + desc);&#10;                    }&#10;                }&#10;            }&#10;            // Safety as readable string list&#10;            List&lt;String&gt; safetyList = new ArrayList&lt;&gt;();&#10;            JsonNode safetyNode = activityNode.path(&quot;safety&quot;);&#10;            if (safetyNode.isArray()) {&#10;                for (JsonNode safe : safetyNode) {&#10;                    String safeText = safe.asText(&quot;&quot;);&#10;                    if (!safeText.isEmpty()) {&#10;                        safetyList.add(safeText);&#10;                    }&#10;                }&#10;            }&#10;            Recommendation recommendation = new Recommendation();&#10;            recommendation.setActivityId(activity.getId());&#10;            recommendation.setUserId(String.valueOf(activity.getUserId()));&#10;            recommendation.setActivityType(String.valueOf(activity.getActivityType()));&#10;            recommendation.setRecommendationText(analysis);&#10;            recommendation.setImprovements(improvementsList);&#10;            recommendation.setSuggestions(suggestionsList);&#10;            recommendation.setSafety(safetyList);&#10;            log.info(&quot;analysis: {}&quot;, analysis);&#10;            log.info(&quot;improvements: {}&quot;, improvementsList);&#10;            log.info(&quot;suggestions: {}&quot;, suggestionsList);&#10;            log.info(&quot;safety: {}&quot;, safetyList);&#10;            // TODO: Save recommendation to DB if needed&#10;            return String.format(&quot;Activity ID: %s processed successfully. Analysis: %s, Improvements: %s, Suggestions: %s, Safety: %s&quot;,&#10;                    activity.getId(), analysis, improvementsList, suggestionsList, safetyList);&#10;        } catch (Exception e) {&#10;            log.error(&quot;Error processing Gemini response for activity ID: {}&quot;, activity.getId(), e);&#10;            return &quot;Error processing Gemini response: &quot; + e.getMessage();&#10;        }&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ai_service/src/main/java/com/child1/ai_service/service/Recommendationservice.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ai_service/src/main/java/com/child1/ai_service/service/Recommendationservice.java" />
              <option name="originalContent" value="package com.child1.ai_service.service;&#10;&#10;&#10;import com.child1.ai_service.model.Recommendation;&#10;import com.child1.ai_service.repo.RecommendationRepo;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;public class Recommendationservice {&#10;    private final RecommendationRepo recommendationRepo;&#10;&#10;    public List&lt;Recommendation&gt; getAllRecommendations() {&#10;        return recommendationRepo.findAll();&#10;    }&#10;&#10;    public Recommendation saveRecommendation(Recommendation recommendation) {&#10;&#10;        return recommendationRepo.save(recommendation);&#10;    }&#10;&#10;    public void deleteRecommendation(String id) {&#10;        if (recommendationRepo.existsById(id)) {&#10;            recommendationRepo.deleteById(id);&#10;        } else {&#10;            throw new IllegalArgumentException(&quot;Recommendation with id &quot; + id + &quot; does not exist.&quot;);&#10;        }&#10;    }&#10;&#10;    public Recommendation getActivityRecommendationById(String id) {&#10;        return recommendationRepo.findById(id)&#10;                .orElseThrow(() -&gt; new IllegalArgumentException(&quot;Recommendation with id &quot; + id + &quot; does not exist.&quot;));&#10;        &#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.child1.ai_service.service;&#10;&#10;&#10;import com.child1.ai_service.model.Recommendation;&#10;import com.child1.ai_service.repo.RecommendationRepo;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.validation.annotation.Validated;&#10;&#10;import javax.validation.Valid;&#10;import java.util.List;&#10;&#10;@Service&#10;@Validated&#10;@RequiredArgsConstructor&#10;public class Recommendationservice {&#10;    private final RecommendationRepo recommendationRepo;&#10;&#10;    public List&lt;Recommendation&gt; getAllRecommendations() {&#10;        return recommendationRepo.findAll();&#10;    }&#10;&#10;    public Recommendation saveRecommendation(@Valid Recommendation recommendation) {&#10;        // Additional null check (optional, as @Valid should handle most cases)&#10;        if (recommendation == null) {&#10;            throw new IllegalArgumentException(&quot;Recommendation cannot be null&quot;);&#10;        }&#10;        return recommendationRepo.save(recommendation);&#10;    }&#10;&#10;    public void deleteRecommendation(String id) {&#10;        if (recommendationRepo.existsById(id)) {&#10;            recommendationRepo.deleteById(id);&#10;        } else {&#10;            throw new IllegalArgumentException(&quot;Recommendation with id &quot; + id + &quot; does not exist.&quot;);&#10;        }&#10;    }&#10;&#10;    public Recommendation getActivityRecommendationById(String id) {&#10;        return recommendationRepo.findById(id)&#10;                .orElseThrow(() -&gt; new IllegalArgumentException(&quot;Recommendation with id &quot; + id + &quot; does not exist.&quot;));&#10;        &#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>